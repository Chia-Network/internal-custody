(mod
  (
    THIS_MOD_HASH
    ROOT
    STATE
    my_amount
    spend_type
    spend_solution
    ; optional
    puzzle_reveal
    proof_of_inclusion
    puzzle_solution
  )

  (include condition_codes.clib)
  (include curry_and_treehash.clib)
  (include sha256tree.clib)
  (include utility_macros.clib)
  (include merkle_utils.clib)

  ; STATE is a list with the following elements in order
  ; - REKEY_MOD_HASH
  ; - ACH_MOD_HASH
  (defun-inline REKEY_MOD_HASH (STATE) (f STATE))
  (defun-inline ACH_MOD_HASH (STATE) (f (r STATE)))

  ;;; utility functions ;;;
  (defun calculate_our_ph (THIS_MOD_HASH ROOT STATE)
    (puzzle_hash_of_curried_function THIS_MOD_HASH
      (sha256tree STATE)
      (sha256 1 ROOT)
      (sha256 1 THIS_MOD_HASH)
    )
  )

  (defun-inline calculate_rekey_ph (REKEY_MOD_HASH ROOT timelock new_root)
    (puzzle_hash_of_curried_function REKEY_MOD_HASH
      (sha256 1 timelock)
      (sha256 1 ROOT)
      (sha256 1 new_root)
    )
  )

  (defun-inline calculate_ach_payment (ACH_MOD_HASH p2_ph)
    (puzzle_hash_of_curried_function ACH_MOD_HASH
      (sha256 1 p2_ph)
    )
  )

  (defun-inline opcode (condition) (f condition))
  (defun-inline puzhash (condition) (f (r condition)))
  (defun-inline amount (condition) (f (r (r condition))))

  (defun check_singleton_and_even (
    conditions
    (singleton_ph . singleton_amount)  ; singleton info
    (even_ph . even_amount)            ; even coin info
    (seen_singleton . seen_even)  ; we set seen_even to 1 when we start to prevent an even (v sneaky)
  )
    (if conditions
        (c
          (f conditions)
          (check_singleton_and_even
            (r conditions)
            (c singleton_ph singleton_amount)
            (c even_ph even_amount)
            (if (= CREATE_COIN (opcode (f conditions)))
                (if (logand (amount (f conditions)) 1)
                    (assert
                      (not seen_singleton)  ; not seen
                      (= singleton_ph (puzhash (f conditions)))
                      (= singleton_amount (amount (f conditions)))
                      ; then
                      (c 1 seen_even)
                    )
                    (assert
                      (not seen_even)  ; not seen
                      (= even_ph (puzhash (f conditions)))
                      (= even_amount (amount (f conditions)))
                      ; then
                      (c seen_singleton 1)
                    )
                )
                (c seen_singleton seen_even)
            )
          )
        )
        (assert seen_singleton seen_even ())
    )
  )

  (defun check_for_rekey_announcement (conditions)
    (if conditions
        (assert
          (not
            (and
              (= (opcode (f conditions)) CREATE_PUZZLE_ANNOUNCEMENT)
              (= (f (r (f conditions))) 'rekey')
            )
          )
          ; then
          (c (f conditions) (check_for_rekey_announcement (r conditions)))
        )
        ()
    )
  )

  ;;; FINISH REKEY ;;;
  (defun finish_rekey (THIS_MOD_HASH ROOT STATE my_amount (
    timelock
    new_root
  ))
    (list
      (list ASSERT_PUZZLE_ANNOUNCEMENT
            (sha256
              (calculate_rekey_ph (REKEY_MOD_HASH STATE) ROOT timelock new_root)
              new_root
            )
      )
      (list CREATE_PUZZLE_ANNOUNCEMENT 'rekey')
      (list CREATE_COIN
            (calculate_our_ph THIS_MOD_HASH new_root STATE)
            my_amount
      )
    )
  )

  ;;; START REKEY ;;;
  (defun start_rekey (THIS_MOD_HASH ROOT STATE my_amount conditions (
    timelock
    new_root_after
  ))
    ; we assert the singleton has the same relative timelock as the rekey so that faster rekeys can initiate first
    (c (list ASSERT_SECONDS_RELATIVE timelock)
      (check_singleton_and_even conditions
        (c (calculate_our_ph THIS_MOD_HASH ROOT STATE) my_amount)                       ; singleton info
        (c (calculate_rekey_ph (REKEY_MOD_HASH STATE) ROOT timelock new_root_after) 0)  ; drop coin info
        (c () ())
      )
    )
  )

  ;;; WITHDRAW_PAYMENT ;;;
  (defun handle_payment (THIS_MOD_HASH ROOT STATE my_amount conditions (
    payment_amount  ; can be negative to accept payments
    p2_ph
  ))
    (assert (not (logand payment_amount 1))
      ; then
      (c (list ASSERT_SECONDS_RELATIVE 2592000)  ; 30 days
        (check_singleton_and_even conditions
          (c (calculate_our_ph THIS_MOD_HASH ROOT STATE) (- my_amount payment_amount))  ; singleton info
          (c (calculate_ach_payment (ACH_MOD_HASH STATE) p2_ph) payment_amount)         ; drop coin info
          (c () (> 0 payment_amount))  ; if it's a negative withdrawal, we don't want evens so we set even_seen to true
        )
      )
    )
  )

  ; main
  (c (list ASSERT_MY_AMOUNT my_amount)  ; assert our amount because every path needs it
    (if (= spend_type 1)
        (finish_rekey THIS_MOD_HASH ROOT STATE my_amount spend_solution)
        (check_for_rekey_announcement  ; block the announcement that finishes the rekey
          ; After this point, all of the spends require authentication
          (assert (= ROOT (simplify_merkle_proof (sha256tree puzzle_reveal) proof_of_inclusion))
            ; then
            (if (= spend_type 2)
                (start_rekey THIS_MOD_HASH ROOT STATE my_amount (a puzzle_reveal puzzle_solution) spend_solution)
                (if (= spend_type 3)
                    (handle_payment THIS_MOD_HASH ROOT STATE my_amount (a puzzle_reveal puzzle_solution) spend_solution)
                    (x)
                )
            )
          )
        )
    )
  )

)