(mod
  (
    RL_MOD_HASH
    START_DATE
    STARTING_AMOUNT
    AMOUNT_PER
    TIME_INTERVAL
    INNER_PUZZLE
    current_time
    inner_solution
  )

  (include condition_codes.clib)
  (include curry_and_treehash.clib)
  (include sha256tree.clib)
  (include utility_macros.clib) ; or, assert, and

  (defun-inline coin_amount (condition) (f (r (r condition))))
  (defun-inline puzzle_hash (condition) (f (r condition)))

  (defun max (a b)
    (i (> a b)
      a
      b
    )
  )

  (defun-inline morph_singleton_condition
    (
      singleton_condition
      RL_MOD_HASH
      START_DATE
      STARTING_AMOUNT
      AMOUNT_PER
      TIME_INTERVAL
      current_time
    )

    (c
      CREATE_COIN
      (c
        (puzzle_hash_of_curried_function RL_MOD_HASH
          (puzzle_hash singleton_condition)
          (sha256 ONE TIME_INTERVAL)
          (sha256 ONE AMOUNT_PER)
          (sha256 ONE STARTING_AMOUNT)
          (sha256 ONE START_DATE)
          (sha256 ONE RL_MOD_HASH)
        )
        (r (r singleton_condition))
      )
    )
  )


  (defun-inline assert_rate (withdrawn_amount possible_withdrawn_amount current_time)
    (assert
      (not (> withdrawn_amount possible_withdrawn_amount))  ; withdrawn_amount <= possible_withdrawn_amount
      (list ASSERT_SECONDS_ABSOLUTE current_time)
    )
  )

  (defun generate_final_conditions
    (
      singleton_condition
      remaining_conditions
      (
        RL_MOD_HASH
        START_DATE
        STARTING_AMOUNT
        AMOUNT_PER
        TIME_INTERVAL
        current_time
      )
    )
    (c
      (assert_rate
        (- STARTING_AMOUNT (coin_amount singleton_condition))
        (calculate_possible_withdrawal START_DATE AMOUNT_PER TIME_INTERVAL current_time)
        current_time
      )
      (c
        (morph_singleton_condition
          singleton_condition
          RL_MOD_HASH
          START_DATE
          STARTING_AMOUNT
          AMOUNT_PER
          TIME_INTERVAL
        )
        remaining_conditions
      )
    )
  )

  (defun-inline calculate_possible_withdrawal (START_DATE AMOUNT_PER TIME_INTERVAL current_time)
    (* (f (divmod AMOUNT_PER TIME_INTERVAL)) (max 0 (- current_time START_DATE)))
  )

  (defun search_for_singleton (conditions args)
    (if conditions
        (if (and
              (= (f (f conditions)) CREATE_COIN)      ; this is a CREATE_COIN
              (logand (coin_amount (f conditions)) ONE) ; the amount is odd
            )
            (generate_final_conditions (f conditions) (r conditions) args)
            (c
              (f conditions)
              (search_for_singleton (r conditions) args)
            )
        )
        (x)
    )
  )

  ; main
  (search_for_singleton
    (a INNER_PUZZLE inner_solution)
    (list
      RL_MOD_HASH
      START_DATE
      STARTING_AMOUNT
      AMOUNT_PER
      TIME_INTERVAL
      current_time
    )
  )
)
